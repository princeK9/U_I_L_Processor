
--------------------------------------------------------------------------------------
|||||||||               ðŸŒŸ Instruction Set Architecture (ISA) ðŸŒŸ            |||||||||           
--------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------
| Encoding            | Instruction|        Meaning          | Operation             |
|---------------------|------------|-------------------------|-----------------------|
| 0fff rrrr           | ALU        |  ALU operation          | A = A f m[r]          |
|---------------------|------------|-------------------------|-----------------------|
| 1000 rrrr           | st rx      | Store A into register   | m[r] = A              |
|---------------------|------------|-------------------------|-----------------------|
| 1001 rrrr           | brl rx     | Branch and link         | m[r] = PC, PC = A     |
|---------------------|------------|-------------------------|-----------------------|
| 1010 rrrr           | ldind (rx) | Load indirect           | A = m[m[r]]           |
|---------------------|------------|-------------------------|-----------------------|
| 1011 rrrr           | stind (rx) | Store indirect          | m[m[r]] = A           |
|---------------------|------------|-------------------------|-----------------------|
| 1100 -fff nnnn nnnn | fi n       | ALU immediate           | A = A f n             |
|---------------------|------------|-------------------------|-----------------------|
| 1101 --00 aaaa aaaa | br         | Branch                  | PC = a                |
|---------------------|------------|-------------------------|-----------------------|
| 1101 --10 aaaa aaaa | brz        | Branch if A is zero     | PC = a                |
|---------------------|------------|-------------------------|-----------------------|
| 1101 --11 aaaa aaaa | brnz       | Branch if A is not zero | PC = a                |
|---------------------|------------|-------------------------|-----------------------|
| 1110 --ss           | sh         | ALU shift               | A = shift(A)          |
|---------------------|------------|-------------------------|-----------------------|
| 1111 aaaa           | EXIT       | Exit                    |                       |
|---------------------|------------|-------------------------|-----------------------|
| 1111 1111           | exit       | Exit for the tester     | PC = PC               |
--------------------------------------------------------------------------------------




---------------------------------------       ----------------------------------------------------
|  ALU Operation and Encoding [ fff  ]|       |          [  ss   ]  Shift instructions           |
---------------------------------------       ----------------------------------------------------
| Encoding | Name | Operation         |       | Encoding | Name   |        Operation             |
|----------|------|-------------------|       |----------|--------|------------------------------|
| 000      | add  | A = A + op        |       | 00       | shl    | A = rotate left              |
|----------|------|-------------------|       |----------|--------|------------------------------|
| 001      | sub  | A = A âˆ’ op        |       | 01       | shr    | A = rotate right             |
|----------|------|-------------------|       |----------|--------|------------------------------|
| 010      | adc  | A = A + op + c    |       | 10       | shl+c  | A = rotate left with carry   |
|----------|------|-------------------|       |----------|--------|------------------------------|
| 011      | sbb  | A = A âˆ’ op âˆ’ c    |       | 11       | shr+c  | A = rotate right with carry  |
|----------|------|-------------------|       ----------------------------------------------------
| 100      | and  | A = A âˆ§ op        |
|----------|------|-------------------|
| 101      | or   | A = A âˆ¨ op        |
|----------|------|-------------------|
| 110      | xor  | A = A âŠ• op       |
|----------|------|-------------------|
| 111      | ld   | A = op            |
---------------------------------------
